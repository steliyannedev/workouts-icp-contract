type Errors = variant {
  MuscleGroupDoesNotExist : text;
  WorkoutDoesNotExist : text;
  UserDoesNotExist : text;
};
type User = record {
  id : text;
  sessionIds : vec text;
  name : text;
  createdAt : nat64;
};
type WorkoutSession = record {
  id : text;
  startedAt : nat64;
  userId : text;
  calories : nat64;
  muscleGroup : text;
  finishedAt : nat64;
};
type _AzleResult = variant { Ok : User; Err : text };
type _AzleResult_1 = variant { Ok : User; Err : Errors };
type _AzleResult_2 = variant { Ok : WorkoutSession; Err : Errors };
type _AzleResult_3 = variant { Ok : vec User; Err : text };
type _AzleResult_4 = variant { Ok : vec WorkoutSession; Err : Errors };
service : () -> {
  createUser : (text) -> (_AzleResult);
  deleteUser : (text) -> (_AzleResult_1);
  endWorkout : (text, nat64) -> (_AzleResult_2);
  getAllUsers : () -> (_AzleResult_3) query;
  getUserById : (text) -> (_AzleResult_1) query;
  listWorkouts : () -> (_AzleResult_4) query;
  startWorkout : (text, text) -> (_AzleResult_2);
}